Sub GenerateSQLFromExcel()

    ' 定义变量
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim fieldA As Variant
    Dim fieldB As Variant
    Dim conditions As String
    Dim sqlTemplate As String
    Dim sqlQuery As String
    Dim templateFilePath As String
    Dim outputFilePath As String
    Dim dataArray As Variant
    Dim fileNum As Integer

    ' 设置工作表
    Set ws = ThisWorkbook.Sheets("Sheet1") ' 替换为你的工作表名称

    ' 获取最后一行
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    ' 将数据加载到数组
    dataArray = ws.Range("A2:B" & lastRow).Value

    ' 初始化SQL条件
    conditions = ""

    ' 在内存中循环遍历数据，生成SQL条件
    For i = LBound(dataArray, 1) To UBound(dataArray, 1)
        fieldA = dataArray(i, 1)
        fieldB = dataArray(i, 2)
        conditions = conditions & " AND (" & fieldA & " = '" & fieldB & "')"
    Next i

    ' 读取SQL模板文件
    templateFilePath = "C:\Path\To\Your\Template.sql" ' 替换为你的SQL模板文件路径
    fileNum = FreeFile
    Open templateFilePath For Input As fileNum
    sqlTemplate = Input$(LOF(fileNum), fileNum)
    Close fileNum

    ' 将条件替换到SQL模板中
    sqlQuery = Replace(sqlTemplate, "{{Condition}}", Mid(conditions, 6)) ' 去掉第一个"AND"

    ' 输出生成的SQL到文件
    outputFilePath = "C:\Path\To\Your\Output.sql" ' 替换为你想保存的文件路径
    fileNum = FreeFile
    Open outputFilePath For Output As fileNum
    Print #fileNum, sqlQuery
    Close fileNum

    MsgBox "SQL文件生成完毕！", vbInformation

End Sub


Sub GenerateSQLFromSelectedFile()

    ' 定义变量
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim fieldA As Variant
    Dim fieldB As Variant
    Dim conditions As String
    Dim sqlTemplate As String
    Dim sqlQuery As String
    Dim templateFilePath As String
    Dim outputFilePath As String
    Dim dataArray As Variant
    Dim fileNum As Integer
    Dim externalWorkbook As Workbook
    Dim externalFilePath As String

    ' 让用户选择外部数据文件
    externalFilePath = Application.GetOpenFilename("Excel Files (*.xlsx), *.xlsx", , "请选择数据文件")

    ' 如果用户取消选择，则退出
    If externalFilePath = "False" Then
        MsgBox "未选择文件，操作取消。", vbExclamation
        Exit Sub
    End If

    ' 打开外部数据文件
    Set externalWorkbook = Workbooks.Open(externalFilePath)
    Set ws = externalWorkbook.Sheets("Sheet1") ' 替换为外部文件中的工作表名称

    ' 获取最后一行
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    ' 将数据加载到数组
    dataArray = ws.Range("A2:B" & lastRow).Value

    ' 关闭外部数据文件
    externalWorkbook.Close False ' 不保存任何更改

    ' 初始化SQL条件
    conditions = ""

    ' 在内存中循环遍历数据，生成SQL条件
    For i = LBound(dataArray, 1) To UBound(dataArray, 1)
        fieldA = dataArray(i, 1)
        fieldB = dataArray(i, 2)
        conditions = conditions & " AND (" & fieldA & " = '" & fieldB & "')"
    Next i

    ' 读取SQL模板文件
    templateFilePath = "C:\Path\To\Your\Template.sql" ' 替换为你的SQL模板文件路径
    fileNum = FreeFile
    Open templateFilePath For Input As fileNum
    sqlTemplate = Input$(LOF(fileNum), fileNum)
    Close fileNum

    ' 将条件替换到SQL模板中
    sqlQuery = Replace(sqlTemplate, "{{Condition}}", Mid(conditions, 6)) ' 去掉第一个"AND"

    ' 输出生成的SQL到文件
    outputFilePath = "C:\Path\To\Your\Output.sql" ' 替换为你想保存的文件路径
    fileNum = FreeFile
    Open outputFilePath For Output As fileNum
    Print #fileNum, sqlQuery
    Close fileNum

    MsgBox "SQL文件生成完毕！", vbInformation

End Sub



Sub GenerateSQLFromLargeFile()

    ' 定义变量
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim fieldA As String
    Dim fieldB As String
    Dim conditions As String
    Dim sqlTemplate As String
    Dim sqlQuery As String
    Dim templateFilePath As String
    Dim outputFilePath As String
    Dim fileNum As Integer
    Dim externalWorkbook As Workbook
    Dim externalFilePath As String
    
    ' 让用户选择外部数据文件
    externalFilePath = Application.GetOpenFilename("Excel Files (*.xlsx), *.xlsx", , "请选择数据文件")

    ' 如果用户取消选择，则退出
    If externalFilePath = "False" Then
        MsgBox "未选择文件，操作取消。", vbExclamation
        Exit Sub
    End If

    ' 打开外部数据文件
    Set externalWorkbook = Workbooks.Open(externalFilePath)
    Set ws = externalWorkbook.Sheets("Sheet1") ' 替换为外部文件中的工作表名称

    ' 获取最后一行
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    ' 初始化SQL条件
    conditions = ""

    ' 逐行读取和处理数据
    For i = 2 To lastRow
        fieldA = ws.Cells(i, 1).Value
        fieldB = ws.Cells(i, 2).Value
        conditions = conditions & " AND (" & fieldA & " = '" & fieldB & "')"

        ' 定期写入文件，避免内存占用过大
        If i Mod 10000 = 0 Then
            ' 读取SQL模板文件
            templateFilePath = "C:\Path\To\Your\Template.sql" ' 替换为你的SQL模板文件路径
            fileNum = FreeFile
            Open templateFilePath For Input As fileNum
            sqlTemplate = Input$(LOF(fileNum), fileNum)
            Close fileNum

            ' 将条件替换到SQL模板中
            sqlQuery = Replace(sqlTemplate, "{{Condition}}", Mid(conditions, 6)) ' 去掉第一个"AND"

            ' 输出生成的SQL到文件
            outputFilePath = "C:\Path\To\Your\Output.sql" ' 替换为你想保存的文件路径
            fileNum = FreeFile
            Open outputFilePath For Append As fileNum
            Print #fileNum, sqlQuery
            Close fileNum

            ' 重置条件字符串
            conditions = ""
        End If
    Next i

    ' 处理剩余的条件
    If conditions <> "" Then
        templateFilePath = "C:\Path\To\Your\Template.sql" ' 替换为你的SQL模板文件路径
        fileNum = FreeFile
        Open templateFilePath For Input As fileNum
        sqlTemplate = Input$(LOF(fileNum), fileNum)
        Close fileNum

        sqlQuery = Replace(sqlTemplate, "{{Condition}}", Mid(conditions, 6)) ' 去掉第一个"AND"

        outputFilePath = "C:\Path\To\Your\Output.sql" ' 替换为你想保存的文件路径
        fileNum = FreeFile
        Open outputFilePath For Append As fileNum
        Print #fileNum, sqlQuery
        Close fileNum
    End If

    ' 关闭外部数据文件
    externalWorkbook.Close False ' 不保存任何更改

    MsgBox "SQL文件生成完毕！", vbInformation

End Sub


import pandas as pd

# 定义Excel文件路径、SQL模板文件路径和输出SQL文件路径
excel_file_path = 'C:/Path/To/Data.xlsx'
template_file_path = 'C:/Path/To/Template.sql'
output_sql_file_path = 'C:/Path/To/Output.sql'

# 读取SQL模板文件
with open(template_file_path, 'r') as template_file:
    sql_template = template_file.read()

# 读取Excel文件，获取指定字段的所有值
df = pd.read_excel(excel_file_path, sheet_name='Sheet1')

# 假设要读取的字段名称是 'FieldA'
df = df[['FieldA']].dropna()

# 固定值
fixed_value = 5

# 将FieldA的值与固定值5组合成元组的字符串形式 (FieldA, 5)
values_str = ", ".join([f"({str(row['FieldA']).replace('\'', '\'\'')}, {fixed_value})" for _, row in df.iterrows()])

# 替换SQL模板中的占位符 {{Condition}} 为生成的IN条件
sql_query = sql_template.replace("{{Condition}}", values_str)

# 将生成的SQL查询写入文件
with open(output_sql_file_path, 'w') as sql_file:
    sql_file.write(sql_query)

print("SQL文件生成完毕！")




import re

def parse_query_results_from_log(file_path):
    logs = []
    current_result = None
    capture_result = False
    field_line_buffer = ""
    in_multiline_field = False
    
    with open(file_path, 'r') as file:
        for line in file:
            stripped_line = line.strip()

            # 检查是否进入多行字段名的状态，使用 $$ 作为换行标识
            if re.match(r'^.*\$\$', stripped_line) and not in_multiline_field:
                in_multiline_field = True
                field_line_buffer += stripped_line.replace('$$', '').strip()  # 去除$$并继续缓冲
                continue
            
            # 检查是否结束多行字段名的状态
            if in_multiline_field:
                field_line_buffer += " " + stripped_line.replace('$$', '').strip()
                if not stripped_line.endswith('$$'):
                    in_multiline_field = False
                continue

            # 如果字段名跨越了多行且已完整捕获，则处理并开始捕获结果
            if field_line_buffer and not in_multiline_field:
                if re.match(r'^[\w\s]+(\s*\t\s*[\w\s]+)+$', field_line_buffer):
                    # 保存前一个查询的结果
                    if capture_result and current_result:
                        logs.append(current_result)
                    current_result = []
                    capture_result = True
                    field_line_buffer = ""  # 重置字段缓冲区
                else:
                    field_line_buffer = ""  # 重置字段缓冲区，如果不是合法的字段名格式

            # 匹配新的字段名行，如果有缓冲区的字段名行则使用它
            if re.match(r'^[\w\s]+(\s*\t\s*[\w\s]+)+$', stripped_line):
                # 保存前一个查询的结果
                if capture_result and current_result:
                    logs.append(current_result)
                current_result = []
                capture_result = True

            # 停止捕获的条件，例如遇到空行或其他标志行
            if capture_result:
                if not stripped_line or stripped_line.startswith('Summary:'):
                    capture_result = False
                    if current_result:
                        logs.append(current_result)
                    current_result = None
                    continue

            # 捕获查询结果内容
            if capture_result:
                current_result.append(stripped_line)

        # 处理最后一个查询结果
        if capture_result and current_result:
            logs.append(current_result)

    return logs

def main():
    log_file_path = 'C:/Path/To/oracle_log.txt'

    # 解析Oracle的SQL执行日志，从字段名开始提取查询结果
    logs = parse_query_results_from_log(log_file_path)

    # 输出查询结果
    for i, result in enumerate(logs, start=1):
        print(f"Result {i}:\n" + "\n".join(result) + "\n")

if __name__ == '__main__':
    main()
