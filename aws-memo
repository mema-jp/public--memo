---
description: 'Update Cloud9 environment policy example'
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  Cloud9EnvironmentId:
    type: 'String'
    description: '(Required) The ID of the Cloud9 environment to update.'
  PolicyArn:
    type: 'String'
    description: '(Required) The ARN of the policy to attach to the Cloud9 role.'
mainSteps:
- name: AttachPolicyToCloud9Role
  action: 'aws:executeAwsApi'
  inputs:
    Service: 'iam'
    Api: 'AttachRolePolicy'
    RoleName: '{{ Cloud9EnvironmentRoleName }}'
    PolicyArn: '{{ PolicyArn }}'
- name: VerifyPolicyAttachment
  action: 'aws:executeAwsApi'
  inputs:
    Service: 'iam'
    Api: 'ListAttachedRolePolicies'
    RoleName: '{{ Cloud9EnvironmentRoleName }}'





description: "Assign predefined permissions to Cloud9 environments."
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  EnvironmentIdList:
    type: "StringList"
  PolicyArn:
    type: "String"
mainSteps:
- name: assignPermissions
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.6"
    Handler: "index.handler"
    Script: |
      import boto3

      def handler(event, context):
        # Initialize the IAM client
        iam_client = boto3.client('iam')
        # The predefined policy ARN to attach
        policy_arn = event['PolicyArn']
        # List of Cloud9 environment IDs
        environment_id_list = event['EnvironmentIdList']
        
        # Iterate over the environment IDs
        for environment_id in environment_id_list:
          # Here you should replace 'role_name' with logic to determine the role name from the environment ID
          role_name = "RoleNameFor-" + environment_id  # This is an example role name pattern
          
          # Attach the policy to the role
          iam_client.attach_role_policy(
            RoleName=role_name,
            PolicyArn=policy_arn
          )
          print(f"Policy {policy_arn} attached to role {role_name} for environment ID {environment_id}")
    InputPayload:
      EnvironmentIdList: "{{ EnvironmentIdList }}"
      PolicyArn: "{{ PolicyArn }}"



{
  "schemaVersion": "0.3",
  "description": "Cloud9 Environment Membership Creation",
  "mainSteps": [
    {
      "action": "aws:executeScript",
      "name": "CreateMembership",
      "inputs": {
        "Runtime": "python3.6",
        "Handler": "script_handler",
        "Script": "import boto3\n\ndef script_handler(events, context):\n    client = boto3.client('cloud9')\n    response = client.create_environment_membership(\n        environmentId='环境ID',\n        userArn='用户ARN',\n        permissions='read-write'\n    )\n    return response"
      }
    }
  ]
}



Resources:
  MyCloud9Environment:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      # Cloud9 环境的配置

  AddUserToCloud9:
    Type: "Custom::AddUserToCloud9"
    Properties:
      ServiceToken: !GetAtt AddUserLambda.Arn
      EnvironmentId: !Ref MyCloud9Environment
      UserArn: "需要添加的用户ARN"

  AddUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      # Lambda 函数的配置
      # 这个 Lambda 函数将处理添加用户到 Cloud9 环境的逻辑



  AddUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              try:
                  cloud9_client = boto3.client('cloud9')
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      cloud9_client.create_environment_membership(
                          environmentId=event['ResourceProperties']['EnvironmentId'],
                          userArn=event['ResourceProperties']['UserArn'],
                          permissions='read-write'
                      )
                  response_data = {}
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  response_data = {'Error': str(e)}
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

      Timeout: 300



  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloud9:*"
                  - "logs:*"
                  - "cfnresponse:*"
                Resource: "*"


  AddUserToCloud9:
    Type: "Custom::AddUserToCloud9"
    Properties:
      ServiceToken: !GetAtt AddUserLambda.Arn
      EnvironmentId: !Ref MyCloud9Environment
      UserArn: "arn:aws:iam::123456789012:user/ExampleUser"



Parameters:
  UserArn:
    Type: String
    Description: "ARN of the user to add to the Cloud9 environment"


Resources:
  # ...（其他资源）...

  AddUserToCloud9:
    Type: "Custom::AddUserToCloud9"
    Properties:
      ServiceToken: !GetAtt AddUserLambda.Arn
      EnvironmentId: !Ref MyCloud9Environment
      UserArn: !Ref UserArn

  # ...（Lambda 函数和其他资源）...



Description: 'Update IAM role for Cloud9 EC2 instance'
SchemaVersion: '0.3'

Parameters:
  InstanceId:
    Type: String
    Description: '(Required) EC2 Instance ID of the Cloud9 environment'
  IamRole:
    Type: String
    Description: '(Required) The name of the IAM role to attach'

MainSteps:
  - name: changeIamRole
    action: 'aws:changeInstanceState'
    inputs:
      InstanceIds: ['{{ InstanceId }}']
      DesiredState: 'stopped'
  - name: associateIamInstanceProfile
    action: 'aws:executeAwsApi'
    inputs:
      Service: 'ec2'
      Api: 'associateIamInstanceProfile'
      Parameters:
        IamInstanceProfile:
          Name: '{{ IamRole }}'
        InstanceId: '{{ InstanceId }}'
  - name: startInstance
    action: 'aws:changeInstanceState'
    inputs:
      InstanceIds: ['{{ InstanceId }}']
      DesiredState: 'running'



description: "自动更换 EC2 实例的 IAM 实例配置文件"
schemaVersion: "0.3"

parameters:
  InstanceId:
    type: "String"
    description: "(Required) ID of the EC2 instance."
  NewIamInstanceProfile:
    type: "String"
    description: "(Required) The new IAM instance profile to associate."

mainSteps:
  - name: disassociateIamInstanceProfile
    action: "aws:executeAwsApi"
    inputs:
      Service: "ec2"
      Api: "describeIamInstanceProfileAssociations"
      Filters:
        - Name: "instance-id"
          Values: 
            - "{{ InstanceId }}"
    outputs:
      - Selector: "IamInstanceProfileAssociations[0].AssociationId"
        Name: "AssociationId"

  - name: disassociateOldIamInstanceProfile
    action: "aws:executeAwsApi"
    inputs:
      Service: "ec2"
      Api: "disassociateIamInstanceProfile"
      AssociationId: "{{ disassociateIamInstanceProfile.AssociationId }}"

  - name: associateNewIamInstanceProfile
    action: "aws:executeAwsApi"
    inputs:
      Service: "ec2"
      Api: "associateIamInstanceProfile"
      InstanceId: "{{ InstanceId }}"
      IamInstanceProfile:
        Name: "{{ NewIamInstanceProfile }}"


description: "自动更换或添加 EC2 实例的 IAM 实例配置文件"
schemaVersion: "0.3"

parameters:
  InstanceId:
    type: "String"
    description: "(Required) ID of the EC2 instance."
  IamInstanceProfile:
    type: "String"
    description: "(Required) The IAM instance profile to associate."

mainSteps:
  - name: describeInstance
    action: "aws:executeAwsApi"
    inputs:
      Service: "ec2"
      Api: "describeInstances"
      Filters:
        - Name: "instance-id"
          Values: 
            - "{{ InstanceId }}"
    outputs:
      - Selector: "$.Reservations[0].Instances[0].IamInstanceProfile"
        Name: "CurrentInstanceProfile"

  - name: checkIamInstanceProfile
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: disassociateIamInstanceProfile
          Variable: "{{ describeInstance.CurrentInstanceProfile }}"
          Operation: "present"
        - NextStep: associateIamInstanceProfile
          Variable: "{{ describeInstance.CurrentInstanceProfile }}"
          Operation: "notpresent"

  - name: disassociateIamInstanceProfile
    action: "aws:executeAwsApi"
    inputs:
      Service: "ec2"
      Api: "disassociateIamInstanceProfile"
      Filters:
        - Name: "instance-id"
          Values: 
            - "{{ InstanceId }}"
    nextStep: associateIamInstanceProfile

  - name: associateIamInstanceProfile
    action: "aws:executeAwsApi"
    inputs:
      Service: "ec2"
      Api: "associateIamInstanceProfile"
      InstanceId: "{{ InstanceId }}"
      IamInstanceProfile:
        Name: "{{ IamInstanceProfile }}"
